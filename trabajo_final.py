# -*- coding: utf-8 -*-
"""Trabajo final

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1_Jy07fYMsJm_FTDlaTbXhPc7FdaLsxKk
"""

!pip install matplotlib-venn
import matplotlib.pyplot as plt #libreria para graficar
import math #liberia de mathematica
import pandas as pd #libreria para manejar datos
import random #libreria para generar numeros aleatorios
# Diccionario para almacenar los servicios
servicios = {}
# Lista para almacenar las ventas
ventas = []
#tipo servicio
TP=["VN", "VI", "PT"]
#tipo beneficio
TPB=["si", "no"]
# Función para generar un código de servicio aleatorio
def generar_codigo_servicio():
    while True:
        codigo = random.randint(30000, 80000)
        if codigo % 5 == 0 and codigo not in servicios: #verificar que es multiplo de 5 y no se repita
            return codigo
# Función para generar un precio sin IGV aleatorio
def generar_precio_sin_igv(tipo_servicio):
    if tipo_servicio == TP[0]: #tipo de servicio VN(viaje nacional)
        while True:
            precio = random.randint(150, 350)
            if precio % 2 == 0: #verificar que es par y no se repita
                return precio
    elif tipo_servicio == TP[1]: #tipo de servicio VI(viaje internacional)
        while True:
            precio = random.randint(380, 750)
            if precio % 3 == 0: #verificar que es multiplo de 3 y no se repita
                return precio
    elif tipo_servicio == TP[2]: #tipo de servicio PT(paquetes turisticos)
        while True:
            precio = random.randint(390, 855)
            if precio % 2 != 0: #verificar que es impar y no se repita
                return precio
# Función para ingresar un nuevo servicio
def ingresar_servicio():
    try:
        while True:
            print("Ingrese el tipo de servicio (solo coloque la abreviación): VN (viajes nacionales), VI (viajes internacionales) y PT (paquetes turísticos):")
            tipo_servicio = input().upper()  # Convertir a mayúsculas
            if tipo_servicio in TP:  # Verificar que el tipo de servicio sea válido
                print("Tipo de servicio válido.")
                break
            else:
                print("Tipo de servicio inválido. Por favor, ingrese VN, VI o PT.")
        while True:
            print("Ingrese la descripción del servicio: ")
            descripcion = input()  # Ingresar la descripción del servicio
            if descripcion and not descripcion.isdigit():  # Verificar que la descripción no esté vacía y no sea un número
                print("Descripción válida.")
                break
            else:
                print("Descripción inválida. Por favor, ingrese una descripción válida.")
        while True:
            print("¿Tiene beneficio tributario? (si/no): ")
            beneficio_tributario = input().lower()  # Convertir a minúsculas
            if beneficio_tributario in TPB:  # Verificar que el beneficio tributario sea válido
                print("Respuesta válida.")
                break
            else:
                print("Respuesta inválida. Por favor, ingrese 'si' o 'no'.")
        codigo = generar_codigo_servicio()  # Generar código de servicio
        precio_sin_igv = (generar_precio_sin_igv(tipo_servicio)*1.0)  # Generar precio sin IGV
        # Almacenar el servicio en el diccionario
        servicios[codigo] = {
            "tipo": tipo_servicio,
            "descripcion": descripcion,
            "beneficio_tributario": beneficio_tributario,
            "precio_sin_igv": precio_sin_igv,
            "numero_de_venta": len(ventas)+1
        }
        print("Servicio ingresado correctamente.")  # Mensaje de confirmación
        return  # Salir de la función después de ingresar correctamente el servicio
    except ValueError as e:
        print(f"Error al ingresar el servicio: {e}")
#funcion pa regsaitrar vent
def registrar_venta():
    global ventas
    global servicios
    if len(servicios) == 0:
        print("No hay servicios disponibles. Debe ingresar un servicio primero.") #si no hay elementoa en ventas
        return
    print("Servicios disponibles:") #mensaje de confirmacion
    for codigo, servicio in servicios.items(): #recorrer el diccionario
        print(f"Número de ventas: {servicio['numero_de_venta']}, Código: {codigo}, Tipo: {servicio['tipo']}, Descripción: {servicio['descripcion']},Beneficio Tributario: {servicio['beneficio_tributario']}, Precio sin IGV: {servicio['precio_sin_igv']}") #imprimir el servicio
    while True: #bucle del codigo srvicio
        try:
            codigo_servicio = input("Ingrese el código del servicio a registrar: ") #ingreso del codigo servicio
            if codigo_servicio.isdigit() and int(codigo_servicio) in servicios: #verificar que el codigo sea valido
                codigo_servicio = int(codigo_servicio) #convertir el codigo a entero
                break
            else:
                print("Código de servicio inválido. Por favor, ingrese un código válido.")
        except ValueError:
            print("Entrada inválida. Debe ingresar un número entero para el código de servicio.")
    while True:
        try:
            cantidad = int(input("Ingrese la cantidad de boletos a registrar: ")) #ingresar la cantidad de boletos
            if cantidad <= 0 or cantidad > 10:
                print("Cantidad de boletos inválida. Debe ser mayor a 0 y menor o igual a 10.") #confirmacion de datos
            else:
                break
        except ValueError:
            print("Entrada inválida. Debe ingresar un número entero para la cantidad de boletos.")
    igv = 0.18 #IGV
    numero_venta = len(ventas) + 1 #calcular el numero de venta
    precio_sin_igv = servicios[codigo_servicio]["precio_sin_igv"]
    if servicios[codigo_servicio]["beneficio_tributario"] == "si": #si el servicio tiene beneficio tributario
      precio_venta = precio_sin_igv  #calcular el precio de venta
    else:
       precio_sin_igv * (1 + igv) #calcular el precio de venta
    total_venta = cantidad * precio_venta #calcular el total de venta
    venta = {
        "numero_venta": numero_venta,
        "codigo_servicio": codigo_servicio,
        "cantidad": cantidad,
        "precio_venta": precio_venta,
        "total_venta": total_venta
    }
    ventas.append(venta) #agregar la venta a la lista
    print(f"Venta registrada correctamente. Código de servicio: {codigo_servicio}") #mensaje de confirmacion
# Función para ordenar las ventas por total de venta
def ordenar_ventas_burbuja(ventas):
    """Ordena las ventas por total de venta utilizando el algoritmo burbuja."""
    n = len(ventas) #obtener la longitud de la lista ventas
    for i in range(n): #recorrer la lista
        for j in range(0, n - i - 1): #recorrer la lista, pero con los valores de n y i
            if ventas[j]["total_venta"] > ventas[j + 1]["total_venta"]: #comparar el total de venta
                ventas[j], ventas[j + 1] = ventas[j + 1], ventas[j] #intercambiar los elementos
    print("Ventas ordenadas por total de venta.") #mensaje de confirmacion
#quicksort
def quicksort(lista, inicio, fin, atributo):
    """Ordena una lista utilizando el algoritmo Quicksort."""
    if inicio < fin: #verificar si el inicio es menor al final
        pivote = particionar(lista, inicio, fin, atributo) #particionar la lista
        quicksort(lista, inicio, pivote - 1, atributo)
        quicksort(lista, pivote + 1, fin, atributo) #ordenar la lista
    return lista
#funcion auxiliar del quicksort
def particionar(lista, inicio, fin, atributo):
    """Función auxiliar para el algoritmo Quicksort."""
    pivote = lista[fin][atributo] #elegir el pivote
    i = inicio - 1 #inicializar el indice
    for j in range(inicio, fin): #recorrer la lista
        if lista[j][atributo] <= pivote: #comparar el elemento con el pivote
            i += 1
            lista[i], lista[j] = lista[j], lista[i] #intercambiar los elementos
    lista[i + 1], lista[fin] = lista[fin], lista[i + 1]
    return i + 1
# Función para buscar una venta por el número de venta
def buscar_venta_binaria(ventas, numero_venta):
    """Busca una venta por número de venta utilizando búsqueda binaria."""
    ventas_ordenadas = quicksort(ventas, 0, len(ventas) - 1, "numero_venta") #ordenar la lista de ventas por quickshot
    izquierda = 0 #inicializar el indice
    derecha = len(ventas_ordenadas) - 1 #obtener el indice del final de la lista
    while izquierda <= derecha: #recorrer la lista
        medio = (izquierda + derecha) // 2 #calcular el indice del medio
        if ventas_ordenadas[medio]["numero_venta"] == numero_venta: #verificar si el numero de venta es igual al medio
            return ventas_ordenadas[medio]
        elif ventas_ordenadas[medio]["numero_venta"] < numero_venta: #verificar si el numero de venta es menor al medio
            izquierda = medio + 1 #buscar en la mitad derecha , si cumple con la condicion
        else:
            derecha = medio - 1 #buscar en la mitad izquierda, sino cumple con la condicion
    return None
# Función para modificar la cantidad de una venta
def modificar_cantidad_venta():
    global ventas
    global servicios
    if len(ventas) == 0:
        print("No hay ventas disponibles para modificar.")
        return
    print("Ventas disponibles:")
    for i in range(len(ventas)): #recorrer la lista de ventas
        venta = ventas[i]
        print(f"Número de venta: {venta['numero_venta']}")
        print(f"Código de servicio: {venta['codigo_servicio']}")
        print(f"Cantidad de boletos: {venta['cantidad']}")
        print(f"Precio de venta: {venta['precio_venta']}")
        print(f"Total de venta: {venta['total_venta']}")
        print()
    while True: #bucle para ingresar el numero de venta
        try:
            numero_venta = int(input("Ingrese el número de venta a modificar: ")) #ingreo de numero de venta deseada a modificar
            if numero_venta <= 0 or numero_venta > len(ventas): #verificar que el numero de venta sea valido
                print("Número de venta inválido. Por favor, ingrese un número válido.")
            else:
                break
        except ValueError:
            print("Entrada inválida. Debe ingresar un número entero para el número de venta.")
    venta_encontrada = None
    for venta in ventas:
        if venta["numero_venta"] == numero_venta:
            venta_encontrada = venta
            break
    if venta_encontrada is None:
        print("No se encontró la venta con el número de venta ingresado.")
        return
    print("Venta encontrada:")
    print(f"Número de venta: {venta_encontrada['numero_venta']}")
    print(f"Código de servicio: {venta_encontrada['codigo_servicio']}")
    print(f"Cantidad de boletos: {venta_encontrada['cantidad']}")
    print(f"Precio de venta: {venta_encontrada['precio_venta']}")
    print(f"Total de venta: {venta_encontrada['total_venta']}")
    while True:
        try:
            nueva_cantidad = int(input("Ingrese la nueva cantidad de boletos: "))
            if nueva_cantidad <= 0 or nueva_cantidad > 10:
                print("Cantidad de boletos inválida. Debe ser mayor a 0 y menor o igual a 10.")
            else:
                break
        except ValueError:
            print("Entrada inválida. Debe ingresar un número entero para la cantidad de boletos.")
    venta_encontrada["cantidad"] = nueva_cantidad
    igv = 0.18
    codigo_servicio = venta_encontrada["codigo_servicio"]
    precio_sin_igv = servicios[codigo_servicio]["precio_sin_igv"]
    if servicios[codigo_servicio]["beneficio_tributario"] == "no":
        precio_venta = precio_sin_igv * (1 + igv)
    else:
        precio_venta = precio_sin_igv
    total_venta = nueva_cantidad * precio_venta
    venta_encontrada["precio_venta"] = precio_venta # intercambio de variable
    venta_encontrada["total_venta"] = total_venta #intercambio de variables
    print("Cantidad de boletos modificada correctamente.") # Mensaje de confirmación
    print(f"Nueva cantidad: {venta_encontrada['cantidad']}") # Mensaje de confirmación
    print(f"Nuevo total de venta: {venta_encontrada['total_venta']}") # Mensaje de confirmación
# Función para buscar una venta por el número de venta (de forma secuencial)
def buscar_venta_secuencial():
    global ventas
    if len(ventas) == 0:
        print("No hay ventas registradas.")
        return
    #acceder a la lista global
    print("Ventas disponibles:")
    for i in range(len(ventas)): #recorrer la lista de ventas
        venta = ventas[i]
        print("Número de venta:", venta["numero_venta"])
        print()
    numero_venta = int(input("Ingrese el número de venta a buscar: "))
    for venta in ventas:
        if venta["numero_venta"] == numero_venta: #buscar la venta por numero de venta
            print("Venta encontrada:") #mensaje de confirmacion
            print("Número de venta:", venta["numero_venta"])
            print("Código de servicio:", venta["codigo_servicio"])
            print("Cantidad de boletos:", venta["cantidad"])
            print("Precio de venta:", venta["precio_venta"])
            print("Total de venta:", venta["total_venta"])  #imprimir la venta
            return #salir de la funcion
    print("Venta no encontrada.")#mensaje de confirmacion
# Función para mostrar la venta con el total de venta más alto
def mostrar_venta_mas_alta():
    venta_mas_alta = ventas[0]
    for venta in ventas:
        if venta["total_venta"] > venta_mas_alta["total_venta"]: #comparar el total de venta
            venta_mas_alta = venta #actualizar la venta mas alta
    print("Venta con el total de venta más alto:")
    print("Número de venta:", venta_mas_alta["numero_venta"])
    print("Código de servicio:", venta_mas_alta["codigo_servicio"])
    print("Cantidad de boletos:", venta_mas_alta["cantidad"])
    print("Precio de venta:", venta_mas_alta["precio_venta"])
    print("Total de venta:", venta_mas_alta["total_venta"])
# Función para almacenar la información en un archivo
def guardar_datos():
    archivo=open("datos.txt", "w") #abrir el archivo en modo escritura
    archivo.write("Servicios:\n") #escribir en el archivo
    for codigo, servicio in servicios.items(): #recorrer el diccionario
            archivo.write(f"  Código: {codigo}\n")
            archivo.write(f"  Tipo: {servicio['tipo']}\n")
            archivo.write(f"  Descripción: {servicio['descripcion']}\n")
            archivo.write(f"  Beneficio tributario: {servicio['beneficio_tributario']}\n")
            archivo.write(f"  Precio sin IGV: {servicio['precio_sin_igv']} soles\n") #puesto en soles
    archivo.write("\nVentas:\n") #escribir en el archivo
    for venta in ventas: #recorrer la lista de ventas
            archivo.write(f"  Número de venta: {venta['numero_venta']}\n")
            archivo.write(f"  Código de servicio: {venta['codigo_servicio']}\n")
            archivo.write(f"  Cantidad de boletos: {venta['cantidad']}\n")
            archivo.write(f"  Precio de venta: {venta['precio_venta']} soles\n")
            archivo.write(f"  Total de venta: {venta['total_venta']} soles\n")
    archivo.close()#cerrar el archivo
    print("Datos guardados correctamente.") #mensaje de confirmacions
# Función para eliminar una venta
def eliminar_venta():
    global ventas # Acceder a la lista global
    global servicios # Acceder al diccionario global
    print("Ventas disponibles:")
    for i in range(len(ventas)): # Recorrer la lista de ventas
        venta = ventas[i] # Obtener la venta actual
        print("Número de venta:", venta["numero_venta"])
        print("Código de servicio:", venta["codigo_servicio"])
        print("Cantidad de boletos:", venta["cantidad"])
        print("Precio de venta:", venta["precio_venta"])
        print("Total de venta:", venta["total_venta"])
        print()
    numero_venta = int(input("Ingrese el número de venta a eliminar: ")) # Ingresar el número de venta
    if numero_venta <= 0 or numero_venta > len(ventas): # Verificar que el número de venta sea válido
        print("Número de venta inválido.") # Mensaje de confirmación
        return
    buscar_venta_binaria(ventas, numero_venta) # Buscar la venta por número de venta
    if ventas is None: # Verificar que la venta exista
        print("No se encontró la venta con el número de venta ingresado.")
        return
    ventas.pop(numero_venta - 1) # Eliminar la venta(utilizando el metodo .pop())
    print("Venta eliminada correctamente.")
# Función para mostrar el gráfico de pastel de las ventas por tipo de servicio
def mostrar_grafico_ventas_por_tipo():
    global ventas
    global servicios

    if len(ventas) == 0:
        print("No hay ventas para generar los gráficos.")
        return

    # Calcular el total de ventas por tipo de servicio
    ventas_por_tipo = {}
    total_ventas_soles = 0

    for venta in ventas:
        tipo_servicio = servicios[venta["codigo_servicio"]]["tipo"]
        if tipo_servicio not in ventas_por_tipo:
            ventas_por_tipo[tipo_servicio] = 0
        ventas_por_tipo[tipo_servicio] += venta["total_venta"]
        total_ventas_soles += venta["total_venta"]  # Sumar al total en soles

    # Extraer los tipos de servicio y los totales de venta
    tipos = list(ventas_por_tipo.keys())
    totales = list(ventas_por_tipo.values())

    # Crear el diagrama de sectores
    plt.figure(figsize=(8, 6))
    plt.pie(totales, labels=tipos, autopct="%1.1f%%")
    plt.title("Distribución del total de ventas por tipo de servicio")
# Mostrar el total de ventas en soles como texto en el centro del gráfico
    plt.text(0, 0, f"Total en soles: {total_ventas_soles:.2f}", fontsize=10, ha='center')
    plt.axis("equal") # Asegurar que el gráfico sea circular
    plt.show()
# Función para mostrar el menú principal
def mostrar_menu(): #funcion para mostrar el menu principal
    print("\n Bienvenidos Sistemas de Viajes:") #imprimir el menu
    print("1. Ingresar servicio")
    print("2. Registrar venta")
    print("3. Modificar cantidad de boletos de venta")
    print("4. Ordenar ventas")
    print("5. Buscar venta")
    print("6. Mostrar venta con total más alto")
    print("7. Guardar datos")
    print("8. Graficos")
    print("9. Eliminar venta")
    print("10. Salir")
    opcion = input("Ingrese una opción: ") #ingresar una opcion
    return opcion
# Bucle principal del sistema
while True: #bucle principal
    opcion = mostrar_menu() #mostrar el menu principal
    try:
        opcion = int(opcion) #convertir a entero
        if opcion < 1 or opcion > 10: #verificar que la opcion sea valida
            print("Opción inválida.") #mensaje de confirmacion
            continue #continuar el bucle
        if opcion == 1:
            ingresar_servicio()
            continue
        elif opcion == 2:
            registrar_venta()
            continue
        elif opcion == 3:
            modificar_cantidad_venta()
            continue
        elif opcion == 4:
            ordenar_ventas_burbuja(ventas)
            continue
        elif opcion == 5:
            buscar_venta_secuencial()
            continue
        elif opcion == 6:
            mostrar_venta_mas_alta()
            continue
        elif opcion == 7:
            guardar_datos()
            continue
        elif opcion == 8:
            mostrar_grafico_ventas_por_tipo()
            continue
        elif opcion == 9:
              eliminar_venta()
              continue
        elif opcion == 10:
            print("¡Gracias por usar nuestro sistema!, nos vemos en la proxima :)")
            break
    except ValueError:
        print("Opción inválida y/o caracter no valido") #mensaje de confirmacion
        continue