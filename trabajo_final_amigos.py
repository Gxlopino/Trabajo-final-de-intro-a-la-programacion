# -*- coding: utf-8 -*-
"""Trabajo final-amigos

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1_Jy07fYMsJm_FTDlaTbXhPc7FdaLsxKk
"""

!pip install matplotlib-venn
import matplotlib.pyplot as plt #libreria para graficar
import random
import matplotlib.pyplot as plt

# Listas y diccionarios para almacenar servicios y ventas
servicios = {}
ventas = []
igv = 0.18  # Impuesto General a las Ventas

# Rango para generar el código de servicio
cod_servicio_i = 30000
cod_servicio_f = 80000

# Rango para el precio sin IGV de viajes nacionales
viajes_nacionales_i = 150
viajes_nacionales_f = 350

# Rango para el precio sin IGV de viajes internacionales
viajes_int_i = 380
viajes_int_f = 750

# Rango para paquetes turísticos
paq_turisticos_i = 390
paq_turisticos_f = 855

# Función para generar un código de servicio aleatorio múltiplo de 5 entre 30000 y 80000
def generar_codigo_servicio():
    while True:
        codigo = random.randint(cod_servicio_i, cod_servicio_f)
        if codigo % 5 == 0 and codigo not in servicios:
            return codigo

# Función para generar un precio sin IGV aleatorio según el tipo de servicio
def generar_precio_sin_igv(tipo_servicio):
    if tipo_servicio == "VN":
        while True:
            precio = random.randint(viajes_nacionales_i, viajes_nacionales_f)
            if precio % 2 == 0:
                return precio
    elif tipo_servicio == "VI":
        while True:
            precio = random.randint(viajes_int_i, viajes_int_f)
            if precio % 3 == 0:
                return precio
    elif tipo_servicio == "PT":
        while True:
            precio = random.randint(paq_turisticos_i, paq_turisticos_f)
            if precio % 2 != 0:
                return precio

# Función para agregar un nuevo servicio
def agregar_servicio():
    while True:
        tipo_servicio = input("Ingrese el tipo de servicio (VN: viajes nacionales, VI: viajes internacionales, PT: paquetes turísticos): ").upper()
        if tipo_servicio in ["VN", "VI", "PT"]:
            break
        else:
            print("Tipo de servicio incorrecto. Intente nuevamente.")

    descripcion = input("Ingrese la descripción del servicio: ")

    while True:
        beneficio_tributario = input("¿El servicio tiene beneficio tributario? (si/no): ").lower()
        if beneficio_tributario in ["si", "no"]:
            break
        else:
            print("Beneficio tributario incorrecto. Intente nuevamente.")

    codigo = generar_codigo_servicio()
    precio_sin_igv = generar_precio_sin_igv(tipo_servicio)
    servicios[codigo] = {
        "tipo": tipo_servicio,
        "descripcion": descripcion,
        "beneficio_tributario": beneficio_tributario,
        "precio_sin_igv": precio_sin_igv
    }
    print("Servicio agregado correctamente.")

# Función para registrar una venta
def registrar_venta():
    numero_venta = len(ventas) + 1
    print("Número de venta:", numero_venta)

    print("Servicios disponibles:")
    for codigo, servicio in servicios.items():
        print(f"  {codigo}: {servicio['descripcion']} ({servicio['tipo']})")

    while True:
        try:
            codigo_servicio = int(input("Ingrese el código del servicio: "))
            if codigo_servicio in servicios:
                break
            else:
                print("Código de servicio no encontrado. Intente nuevamente.")
        except ValueError:
            print("Entrada inválida. Ingrese un número.")

    while True:
        try:
            cantidad = int(input("Ingrese la cantidad de boletos (1-9): "))
            if 1 <= cantidad <= 9:
                break
            else:
                print("Cantidad fuera de rango. Intente nuevamente.")
        except ValueError:
            print("Entrada inválida. Ingrese un número.")

    precio_sin_igv = servicios[codigo_servicio]["precio_sin_igv"]
    if servicios[codigo_servicio]["beneficio_tributario"] == "si":
        precio_venta = precio_sin_igv * (1 + igv)
    else:
        precio_venta = precio_sin_igv

    total_venta = cantidad * precio_venta
    ventas.append({
        "numero_venta": numero_venta,
        "codigo_servicio": codigo_servicio,
        "cantidad": cantidad,
        "precio_venta": precio_venta,
        "total_venta": total_venta
    })
    print("Venta registrada correctamente.")

# Función de ordenamiento burbuja
def burbuja(lista):
    for i in range(len(lista) - 1):
        for j in range(len(lista) - 1 - i):
            if lista[j]["total_venta"] > lista[j + 1]["total_venta"]:
                aux = lista[j + 1]
                lista[j + 1] = lista[j]
                lista[j] = aux

# Función de ordenamiento Quicksort
def quicksort(lista):
    if len(lista) <= 1:
        return lista
    else:
        pivot = lista[0]
        menores = []
        mayores = []
        for i in range(1, len(lista)):
            if lista[i]["total_venta"] > pivot["total_venta"]:
                mayores.append(lista[i])
            else:
                menores.append(lista[i])
        mayores = quicksort(mayores)
        menores = quicksort(menores)
        return menores + [pivot] + mayores

# Función para ordenar las ventas por total de venta usando Quicksort
def ordenar_ventas_quicksort():
    global ventas
    ventas = quicksort(ventas)
    print("Ventas ordenadas por total de venta.")

# Función para buscar una venta secuencialmente
def buscar_venta_secuencial():
    while True:
        try:
            numero_venta = int(input("Ingrese el número de venta a buscar: "))
            break
        except ValueError:
            print("Entrada inválida. Ingrese un número.")

    for venta in ventas:
        if venta["numero_venta"] == numero_venta:
            print(f"Venta encontrada: {venta}")
            return
    print("Venta no encontrada.")

# Función para buscar una venta usando búsqueda binaria
def buscar_venta_binaria(numero_venta):
    izquierda, derecha = 0, len(ventas) - 1
    while izquierda <= derecha:
        medio = (izquierda + derecha) // 2
        if ventas[medio]["numero_venta"] == numero_venta:
            return ventas[medio]
        elif ventas[medio]["numero_venta"] < numero_venta:
            izquierda = medio + 1
        else:
            derecha = medio - 1
    return None

# Función para modificar la cantidad de boletos de una venta
def modificar_cantidad_venta():
    ordenar_ventas_quicksort()
    while True:
        try:
            numero_venta = int(input("Ingrese el número de venta a modificar: "))
            break
        except ValueError:
            print("Entrada inválida. Ingrese un número.")

    venta = buscar_venta_binaria(numero_venta)
    if venta:
        while True:
            try:
                nueva_cantidad = int(input("Ingrese la nueva cantidad de boletos (1-9): "))
                if 1 <= nueva_cantidad <= 9:
                    break
                else:
                    print("Cantidad fuera de rango. Intente nuevamente.")
            except ValueError:
                print("Entrada inválida. Ingrese un número.")

        codigo_servicio = venta["codigo_servicio"]
        precio_sin_igv = servicios[codigo_servicio]["precio_sin_igv"]
        if servicios[codigo_servicio]["beneficio_tributario"] == "si":
            precio_venta = precio_sin_igv * (1 + igv)
        else:
            precio_venta = precio_sin_igv

        venta["cantidad"] = nueva_cantidad
        venta["precio_venta"] = precio_venta
        venta["total_venta"] = nueva_cantidad * precio_venta
        print("Cantidad de boletos modificada correctamente.")
    else:
        print("Venta no encontrada.")

# Función para mostrar la venta con el total más alto
def mostrar_venta_mas_alta():
    if ventas:
        ordenar_ventas_quicksort()
        venta_mas_alta = ventas[-1]  # Asumiendo orden ascendente
        print("Venta con el total de venta más alto:", venta_mas_alta)
    else:
        print("No hay ventas registradas.")

# Función para guardar los datos en un archivo
def guardar_datos():
    with open("datos.txt", "w") as archivo:
        archivo.write("Servicios:\n")
        for codigo, servicio in servicios.items():
            archivo.write(f"{codigo}: {servicio}\n")
        archivo.write("\nVentas:\n")
        for venta in ventas:
            archivo.write(f"{venta}\n")
    print("Datos guardados correctamente.")

# Función para mostrar estadísticas de ventas
def mostrar_estadisticas_ventas():
    tipos_servicio = {"VN": 0, "VI": 0, "PT": 0}
    for venta in ventas:
        tipo = servicios[venta["codigo_servicio"]]["tipo"]
        tipos_servicio[tipo] += venta["cantidad"]

    labels = list(tipos_servicio.keys())
    values = list(tipos_servicio.values())

    plt.bar(labels, values, color=['blue', 'green', 'orange'])
    plt.xlabel('Tipo de Servicio')
    plt.ylabel('Cantidad de Ventas')
    plt.title('Estadísticas de Ventas por Tipo de Servicio')
    plt.show()

# Función para mostrar el menú principal
def mostrar_menu():
    print("\nBienvenidos al programa aerolínea Ulima:")
    print("1. Ingresar servicio")
    print("2. Registrar venta")
    print("3. Modificar cantidad de boletos de venta")
    print("4. Ordenar ventas")
    print("5. Buscar venta")
    print("6. Mostrar venta con total más alto")
    print("7. Guardar datos")
    print("8. Mostrar estadísticas de ventas")
    print("9. Salir")
    return input("Ingrese una opción: ")

# Bucle principal del sistema
while True:
    opcion = mostrar_menu()
    if opcion == "1":
        agregar_servicio()
    elif opcion == "2":
        registrar_venta()
    elif opcion == "3":
        modificar_cantidad_venta()
    elif opcion == "4":
        ordenar_ventas_quicksort()
    elif opcion == "5":
        buscar_venta_secuencial()
    elif opcion == "6":
        mostrar_venta_mas_alta()
    elif opcion == "7":
        guardar_datos()
    elif opcion == "8":
        mostrar_estadisticas_ventas()
    elif opcion == "9":
        break
    else:
        print("Opción inválida.")